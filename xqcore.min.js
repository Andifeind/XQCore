/**
 * XQCore core module
 * @module XQCore
 */
/*!
 * XQCore - +0.12.1-193
 * 
 * Model View Presenter Javascript Framework
 *
 * XQCore is licenced under MIT Licence
 * http://opensource.org/licenses/MIT
 *
 * Copyright (c) 2012 - 2015 Noname Media, http://noname-media.com
 * Author Andi Heinkelein
 *
 * Creation Date: 2015-11-14
 * 
 */
/*global XQCore:true */
var XQCore;!function(a,b){/*global define:false */
"use strict";"function"==typeof define&&define.amd?define("xqcore",["jquery"],b):"undefined"!=typeof module&&module.exports?module.exports=b(require("jquery")):a.XQCore=b(a.jQuery)}(this,function(a){"use strict";
//--
/**
     * XQCore main object
     *
     * @package XQcore
     * @type {Object}
     */
/**
     * Merges the properties from one or more objects together into a target object
     * Its simply an alias for jQuery.extend.
     * 
     * @method extend
     * @param {Boolean} [deep] If true, a deep merge is using
     * @param {Object} target Target object. This object will be extended with new properties
     * @param {Object} [object1] Object to merge
     * @param {Object} [objectN] Object to merge
     * @return {Object} Returns the merged target object
     * @example {js}
     * var target = {
     *     a: 'A1',
     *     b: 'B1'
     * }
     *
     * var obj1 = {
     *     b: 'B2',
     *     c: 'C2'
     * }
     *
     * extend(target, obj1);
     * //Returns {a: 'A1', b: 'B2', c: 'C2'}
     *  
     */
/**
     * Module storage
     */
/**
     * Checks for a valid ObjectId
     * 
     * The pattern of an objectId can be overwritten by setting the XQCore.objectIdPattern property
     *
     * @return {Boolean} Returns true if value is an valid objectId
     */
/**
     * Defines module names for different module loading mechanisms
     * @type {Object}
     */
/**
     * Import a module name, uses current used module load or load from window
     * @param  {String} moduleName Module name
     * @return {Any}            Returns the module
     */
/**
     * Set a local for the current session
     * 
     * @method setLocale
     * @param  {String}  locale Local string
     */
/**
     * Returns a local string
     * @method getLocale
     * @return {[type]}  [description]
     */
/**
     * Defines a global log level
     *
     * XQCore has 5 log levels
     *
     * 0 = off
     * 1 = error
     * 2 = warning
     * 3 = info
     * 4 = debug
     * 5 = trace
     * 
     * @property {String} logLevel
     */
/**
     * Returns one or all queries
     * Converts all numberic items to a Number
     *
     * @method getQuery
     * @param  {String} name Query name
     * @return {Object|String}      Returns all queries or one value.
     */
/**
     * Checks wether an object is an empty object
     * @param  {Object}  obj Object which should be checked
     * @return {Boolean}     Returns tru if object is empty
     */
/**
     * Checks wether an object is an empty object or an empty array
     * @param  {Object|Array}  obj Object which should be checked
     * @return {Boolean}     Returns true if obj is empty
     */
return XQCore={/**
         * Contains the current XQCore version
         * @property {String} version
         */
version:"0.12.1-193",/**
         * Defines a default route
         * @property {String} defaultRoute
         */
defaultRoute:"/",/**
         * Enables html5 routing support
         * @property {Boolean} html5Routes
         * @default false
         */
html5Routes:!1,/**
         * Defines a base path of your projewt
         * @type {String}
         */
basePath:"",/**
         * Sets a hashbang for routing. This value is added to each route if html5Routes is set to false
         * @property {String} hashBang
         */
hashBang:"#!",
//TODO Check whether we need this property
callerEvent:"callerEvent",
//TODO Do we need this?
objectIdPattern:/^[a-zA-Z0-9]{24}$/,/**
         * Sets the default template engine
         * @property {String} templateEngine
         * @default firetpl
         */
templateEngine:"firetpl",/**
         * Sets a views directory
         * @property {String} viewsDir
         */
viewsDir:"./views/",/**
         * Set the file extension for views
         * @property {String} viewExt
         */
viewExt:".fire",/**
         * Defines a default socket port
         * @property {Number} socketPort
         * @default 9889
         */
socketPort:9889,/**
         * Sets max length of event listener
         * @property {Number} eventListenerMaxLength=1328
         */
eventListenerMaxLength:1328},XQCore.extend=a.extend,XQCore.isPlainObject=a.isPlainObject,XQCore.isFunction=a.isFunction,XQCore.__moduleCache={},XQCore.isObjectId=function(a){return this.objectIdPattern.test(a)},XQCore.modules={jquery:{cjs:"jquery",amd:"jquery",win:"jQuery"},firetpl:{cjs:"firetpl",amd:"firetpl",win:"fireTpl"},sockjs:{cjs:"xqcore/lib/sockjs.js",amd:"xqcore/lib/sockjs.js",win:"SockJS"}},XQCore.require=function(a){if(XQCore.__moduleCache[a])return XQCore.__moduleCache[a];var b="win";"undefined"!=typeof module&&module.exports&&"function"==typeof require?b="cjs":"function"==typeof define&&define.amd&&(b="amd"),XQCore.modules[a][b]&&(a=XQCore.modules[a][b]);try{if("cjs"===b||"amd"===b)try{return require(a)}catch(c){console.warn("Module not registered as a "+("cjs"===b?"CommonJS":"AMD")+" module! Try to load from window object",a)}return window[a]}catch(c){console.error("Could not load module!",a,c)}},XQCore.setLocale=function(a){localStorage.setItem("xqcore.locale",a)},XQCore.getLocale=function(){var a=localStorage.getItem("xqcore.locale");return a?a:navigator.language},XQCore.logLevel=1,XQCore.getQuery=function(a){return XQCore.__query||(XQCore.__query={},location.search.substr(1).split("&").forEach(function(a){if(a=a.split("="),a&&a[0]){var b=encodeURI(a[1]);XQCore.__query[a[0]]=isNaN(b)?b:Number(b)}})),a?XQCore.__query[a]:XQCore.__query},XQCore.isEmptyObject=function(a){var b;for(b in a)return!1;return!0},XQCore.isEmpty=function(a){return Array.isArray(a)?0===a.length:XQCore.isEmptyObject(a)},XQCore}),/**
 * Extends XQCore with some usefull functions
 *
 * @module  XQCore.Utils
 */
function(a,b){"use strict";a.undotify=function(a,c){return a&&(a=a.split("."),a.forEach(function(a){c=c?c[a]:b})),c},/**
     * Creates a object from an dotified key and a value
     *
     * @public
     * @method dedotify
     * 
     * @param {Object} obj Add new value to obj. This param is optional.
     * @param {String} key The dotified key
     * @param {Any} value The value
     *
     * @returns {Object} Returns the extended object if obj was set otherwis a new object will be returned
     */
a.dedotify=function(a,b,c){"string"==typeof a&&(c=b,b=a,a={});var d=a;if(b){b=b.split(".");var e=b.length;b.forEach(function(b,d){return d===e-1?/\[\]$/.test(b)?(b=b.substr(0,b.length-2),a[b]||(a[b]=[]),void a[b].push(c)):void(a[b]=c):(a[b]||(a[b]={}),void(a=a[b]))})}return a=c,d},/**
     * Creates a unique id
     *
     * @param {Number} len (Optional) String length. Defaults to 7
     * @returns {String} Unique string
     */
a.uid=function(a){a=a||7;for(var b="";b.length<a;){var c=Math.random().toString(36).substr(2);b+=c}return b.substr(0,a)}}(XQCore),/**
 * XQCore Logger module
 *
 * Produces logging output to the browser console. This module is in all XQCore modules as var `log` available.
 * It is not necessary to instantiate it. The logger module has 5 logging levels: `ERROR, WARN, INFO, DEBUG, TRACE`.
 * The log-levels can be controlled by setting it globally by setting the XQCore.logLevel property,
 * or locally for each module by change the log.logLevel property. The locally property overrides the globally property 
 * for the current module.
 *
 * @module XQCore.Logger
 * 
 */
function(a,b){"use strict";/**
     * XQCore Logger is a logging module to log messages, warnings, errors to the browser console
     * 
     * @constructor
     * @param {String} name Logger name (Optional)
     * 
     * @example {js}
     * var log = new XQCore.Logger('myLog');
     * log.log('Hello World');
     *
     * //Logs this to the console: [myLog] Hello World
     *
     * var log2 = new XQCore.Logger();
     * log2.log('Hello World');
     *
     * //Logs this to the console: Hello World
     *
     * 
     */
var c=function(b){this.loggerName=b,this.logLevel=a.logLevel};/**
     * Logs a message to the console.
     *
     * To log a message of this type a minimum logLevel of INFO is required.
     * Only the first given argument will be logged if log level is set to INFO.
     * To log all arguments, log level must be set to DEBUG.
     *
     * This method can have multiple arguments!
     *
     * @method log
     * @example {js}
     * log.logLevel = 3; //INFO
     * log.log('Write to console', {test: '123'});
     * //Logs only the first argument
     *
     * log.logLevel = 4;
     * log.log('Write to console with args', {test: '123'});
     * //Logs all arguments
     *
     * @param {Any} msg logs all arguments to the console
     */
c.prototype.log=function(){var b;a.logLevel>=3&&(b=Array.prototype.slice.call(arguments),this.loggerName&&b.unshift("["+this.loggerName+"]"),console.log.apply(console,b))},/**
     * Logs a warning message to the console.
     *
     * To log a warning message of this type a minimum logLevel of WARNING is required.
     *
     * This method can have multiple arguments!
     *
     * @method warn
     * @example {js}
     * log.logLevel = 2; //WARNING
     * log.warn('Unvalid number', {test: '123'});
     *
     * @param {Any} msg logs all arguments to the console
     */
c.prototype.warn=function(){var b;a.logLevel>=2&&(b=Array.prototype.slice.call(arguments),this.loggerName&&b.unshift("["+this.loggerName+"]"),console.warn.apply(console,b))},/**
     * Logs a error message to the console.
     *
     * To log a error message of this type a minimum logLevel of WARNING is required.
     *
     * This method can have multiple arguments!
     *
     * @method error
     * @example {js}
     * log.logLevel = 1; //ERROR
     * log.error('Unvalid number', {test: '123'});
     *
     * @param {Any} msg logs all arguments to the console
     */
c.prototype.error=function(){var b;a.logLevel>=1&&(b=Array.prototype.slice.call(arguments),this.loggerName&&b.unshift("["+this.loggerName+"]"),console.error.apply(console,b))},/**
     * Logs a debug message to the console.
     *
     * To log a debug message of this type a minimum logLevel of DEBUG is required.
     * Only the first given argument will be logged if log level is set to DEBUG.
     * To log all arguments, log level must be set to TRACE.
     *
     * This method can have multiple arguments!
     *
     * @method debug
     * @example {js}
     * log.logLevel = 3; //DEBUG
     * log.debug('Write to console', {test: '123'});
     * //Logs only the first argument
     *
     * log.logLevel = 4;
     * log.debug('Write to console with args', {test: '123'});
     * //Logs all arguments
     *
     * @param {Any} msg logs all arguments to the console
     */
c.prototype.debug=function(){var b;a.logLevel>=4&&(b=Array.prototype.slice.call(arguments),this.loggerName&&b.unshift("["+this.loggerName+"]"),console.debug.apply(console,b))},/**
     * Logs a log message to the console. This is just an alias for log
     *
     * @method info
     */
c.prototype.info=c.prototype.log,/**
     * Start a timeTracer
     *
     * @method timer
     * @param {String} timerName Set the name for your (Optional)
     * @return {Object} Returns a TimerObject
     */
c.prototype.timer=function(a){var b=this,c={start:null,stop:null,name:a,logger:this,end:function(){this.stop=Date.now(),this.logger.log("Timer "+a+" finished after "+b.getHumanTime(this.stop-this.start))}};/*if (name) {
            this.timerStore[name] = timer;
        }*/
//Set timer start time
return this.log("Start Timer "+a),c.start=Date.now(),c},
// --- new methods
c.prototype.dev=function(){var a;this.debug&&(a=Array.prototype.slice.call(arguments),this.loggerName&&a.unshift("["+this.loggerName+"]"),console.debug.apply(console,a))},c.prototype.req=c.prototype.log,c.prototype.res=c.prototype.log,c.prototype.getHumanTime=function(a){return 1e3>a?a+"ms":6e4>a?Math.round(a/100)/10+"sec":Math.round(a/6e4)+"min "+Math.round(a%6e4/1e3)+"sec"},a.Logger=c}(XQCore),/**
 * XQCore EventEmitter
 *
 * A powerfull event emitter
 *
 * @module XQCore.Event
 *
 * @example {js}
 * var ee = new XQCore.Event();
 * ee.on('echo', function(msg) {
 *     console.log('Msg:', msg);
 * });
 *
 * //Emit an event
 * ee.emit('echo', 'Hello World!');
 *
 * @example {js}
 * var MyModule = function() {
 *     //Call Event constructor
 *     XQCore.Event.call(this);
 * };
 *
 * //Extend MyModule with event emitter methods
 * XQCore.extend(MyModule.prototype, XQCore.Event.prototype);
 */
function(a,b){"use strict";var c=new a.Logger("EventEmitter"),d=function(a,b,c){this.fn=c,this.calls=0,this.once=!1,/**
         * Removes this event listener
         * @method  remove
         * @return {Boolean} Returns true if event was removed
         */
this.remove=function(){a.off(b,c)}},e=function(){this.__events={},this.__logger=c,/**
         * Sets max length of event listeners
         * @property {Number} maxLength
         */
this.maxLength=a.eventListenerMaxLength};/**
     * Registers an event listener
     * @method on
     * @param  {String}   event Event name
     * @param  {Function} fn    Event function
     * @return {Object}         Returns an EventListener instance
     */
e.prototype.on=function(a,b){var e=new d(this,a,b);return this.__events[a]||(this.__events[a]=[]),this.__events[a].push(e),this.__events[a].length>this.maxLength?c.warn("Listener max length was exceeded!","List:",a,"Length:",this.__events[a].length):c.info("Register new `"+a+"` event"),e},/**
     * Registers an once event listener. This listener is called only once a time.
     *
     * @method once
     * @param  {event}  event  Event name
     * @param  {Function} fn    Event function
     * @return {Object}         Returns an EventListener instance
     */
e.prototype.once=function(a,b){var c=Array.prototype.slice.call(arguments),d=this.on.apply(this,c);return d.once=!0,d},/**
     * Emits an event
     * @method emit
     * @param  {String} event Event name
     * @param  {Any} data  Event data, you can use multiple args here
     * @return {Number}    Returns the number of emited events
     */
e.prototype.emit=function(a,b){if(!this.__events[a])return c.info("Emit `"+a+"` event failed! No listener of this type are registered"),0;for(var d=Array.prototype.slice.call(arguments,1),e=this.__events[a].length,f=e-1;f>=0;f--){var g=this.__events[a][f];g.fn.apply(this,d),g.calls++,g.once===!0&&this.__events[a].splice(f,1)}return e&&(c.info("Emit `"+a+"` event to",e,"listener"),c.debug(" ... data:",b)),e},/**
     * Unregisters events
     *
     * @method off
     * @param  {String}  event  Event name
     * @param  {Function}  [fn]  Event function. If this property is set only that function will be removed. Otherwis all events of this name will be removed
     * @return {Number} Returns the number of removed events
     */
e.prototype.off=function(a,b){var d=0;if(!this.__events[a])return c.info("Unregister events failed! No `"+a+"` events were found!"),0;if(b)for(var e=this.__events[a].length,f=0;e>f;f++){var g=this.__events[a][f];g&&g.fn===b&&(this.__events[a].splice(f,1),d++,0===this.__events[a].length&&delete this.__events[a])}else d=this.__events[a].length,delete this.__events[a];return c.info("Unregister `"+a+"` events!","Removed "+d+" listener"),d},/**
     * Removes all registered events
     * @method clear
     * @return {Number} Returns the number of removed events
     */
e.prototype.clearEvents=function(){this.__events={}},a.Event=e}(XQCore),/**
 * XQCore.ReadyState module
 * 
 * Holds a function call until a state becomes ready
 * 
 * @module XQCore.ReadyState
 */
function(a){var b=function(){this.__isReady=!1,this.__readyFuncs=[]};/**
     * Wait till view is ready
     *
     * @method ready
     * @param {Function} fn FUnction to be called if state becomes ready
     */
b.prototype.ready=function(a){this.__isReady?a.call(this):this.__readyFuncs.push(a)},/**
     * Sets a state ready and calls all retained functions
     * 
     * @method setReady
     */
b.prototype.setReady=function(){var a=this;this.__isReady=!0,this.__readyFuncs&&(this.__readyFuncs.forEach(function(b){b.call(a)}),this.__readyFuncs=[])},/**
     * Unsets a ready state
     * 
     * @method unsetReady
     */
b.prototype.unsetReady=function(){this.__isReady=!1},a.ReadyState=b}(XQCore),/**
 * XQCore Presenter
 *
 * A presenter controlls your models, lists and views.
 * It renders views as long as any data had been changed.
 *
 * @module XQCore.Presenter
 */
function(a,b){"use strict";var c,d=function(b,d){var e=this;"function"==typeof arguments[0]&&(d=b,b=null),/**
         * Set presenter name
         * @public
         * @type {String}
         */
this.name=b||"Nameless",/**
         * Router instance
         * @private
         * @type {Object}
         */
this.router=a.Router.getInstance(),c=new a.Logger(this.name+"Presenter"),this.__views={},"function"==typeof d&&d.call(this,e,c)};a.extend(d.prototype,new a.Event),/**
     * Initialize a presenter
     *
     * @method init
     */
d.prototype.init=function(){},/**
     * Add a history item to the browser history
     *
     * @param {String} url Page URL (Optional) defaults to the curent URL
     * @param {Object} data Data object
     */
d.prototype.pushState=function(b,d){
// log.info('Check State', data, history.state, XQCore.compare(data, history.state));
// if (XQCore.compare(data, history.state)) {
//     this.warn('Abborting history.pushState because data are equale to current history state');
// }
var e=a.html5Routes||"/"===b.charAt(0)?"":a.hashBang;b=e+b,history.pushState(d,"",b||null),c.info("Update history with pushState. New URL: "+d,b)},/**
     * Add a history item to the browser history
     *
     * @param {String} url Page URL (Optional) defaults to the current URL
     * @param {Object} data Data object
     */
d.prototype.replaceState=function(b,d){var e=a.html5Routes||"/"===b.charAt(0)?"":a.hashBang;b=e+b,history.replaceState(d,"",b||null),c.info("Update history with replaceState. New URL: "+d,b)},/**
     * Navigates to a given route
     *
     * Options: {
     *  replace: <Boolean> Replace current history entry with route (Only when html5 routes are enabled)
     *  noPush: <Boolean> Set this to false to surpress a route change when new route equals to old route
     * }
     *
     * @param {String} route Route url
     * @param {Object} options Options
     */
d.prototype.navigateTo=function(b,c){c=c||{},a.html5Routes?this.router.callRoute(b,c):(location.hash=a.hashBang+b,this.router.callRoute(b,c))},/**
     * Navigate back
     * 
     * @method navigateBack
     */
d.prototype.navigateBack=function(){history.back()},/**
     * Gets a view by it's name
     *
     * @method getView
     * @param {String} viewName Required view name
     * @return {Object} Returns view object or null if no view was found
     */
d.prototype.getView=function(a){return this.__views[a]||null},/**
     * Returns the current hash
     *
     * @method getHash
     * @returns {String} Returns the current value from location.hash
     */
d.prototype.getHash=function(){return location.hash},/**
     * Returns the current pathname
     *
     * @method getPathname
     * @returns {String} Returns the current value from location.pathname
     */
d.prototype.getPathname=function(){return location.pathname},/**
     * Couple a model with a view
     *
     * @method couple
     * @chainable
     * @param {Object} conf Configuration object
     *
     * conf: {
     *   model: String modelname
     *   view: String viewname
     *   route String routename
     * }
     */
d.prototype.couple=function(b,c,d){d=d||{},c instanceof a.List?this.coupleList(b,c,d):this.coupleModel(b,c,d),this.coupleView(b,c,d)},/**
     * Couples a view onto a model
     *
     * @method coupleModel
     * @param {Object} view XQCore.View instance
     * @param {Object} model XQCore.Model instance
     */
d.prototype.coupleModel=function(b,d,e){if(e=e||{},!(b instanceof a.View))return c.error("Could not couple model with view. First arg is not a valid view!");if(!(d instanceof a.Model))return c.error("Could not couple model with view. Second arg is not a valid model!");c.info("Couple model",d.name,"with",b.name),d.__coupled&&d.__coupled.uncouple(),d.__coupled={obj:b,events:[],uncouple:function(){c.info("Uncouple model",d.name,"from",b.name),d.__coupled.events.forEach(function(a){a.remove()}),delete d.__coupled}};var f={"data.replace":"render","data.set":"render","value.set":"change",
// 'item.insert': 'xrender',
"item.remove":"remove","validation.error":"validationFailed","state.change":"onStateChange"},g=function(a,c){var e="function"==typeof c?c:b[c].bind(b),f=d.on(a,e);d.__coupled.events.push(f)};for(var h in f)f.hasOwnProperty(h)&&g(h,f[h]);
//Initial view render with current model data
b.render(d.get()),console.log("VIEW",b),console.log("MODEL",d)},/**
     * Couples a listwith a view
     *
     * @method coupleList
     * @param {Object} view XQCore.View instance
     * @param {Object} model XQCore.Model instance
     */
d.prototype.coupleList=function(b,d){if(!(b instanceof a.View))return c.error("Could not couple list with view. First arg is not a valid view!");if(!(d instanceof a.List))return c.error("Could not couple list with view. Second arg is not a valid list!");c.info("Couple list",d.name,"with",b.name),d.__coupled&&d.__coupled.uncouple(),d.__coupled={obj:b,events:[],uncouple:function(){c.info("Uncouple list",d.name,"from",b.name),d.__coupled.events.forEach(function(a){a.remove()}),delete d.__coupled}};var e={"item.push":function(a){b.append("_ftl_root",a[0].toJSON())},"item.unshift":"prepend","item.pop":"removeLast","item.shift":"removeFirst","item.update":"update","item.remove":function(a,c){b.remove("_ftl_root",c)},"state.change":"onStateChange"},f=function(a,c){var e="function"==typeof c?c:b[c].bind(b),f=d.on(a,e);d.__coupled.events.push(f)};for(var g in e)e.hasOwnProperty(g)&&f(g,e[g]);
//Initial view render with current list data
b.render(d.toArray()),console.log("VIEW",b),console.log("LIST",d)},/**
     * Couples a view with a model or a list
     *
     * @method coupleView
     * @param {Object} view XQCore.View instance
     * @param {Object} model XQCore.Model or XQCore.List instance
     */
d.prototype.coupleView=function(b,d){if(!(b instanceof a.View))return c.error("Could not couple list with view. First arg is not a valid view!");if(!(d instanceof a.Model||d instanceof a.List))return c.error("Could not couple list with view. Second arg is not a valid model or list!");c.info("Couple view",b.name,"with",d.name),b.__coupled&&b.__coupled.uncouple(),b.__coupled={obj:d,events:[],uncouple:function(a){c.info("Uncouple view",b.name,"from",d.name),b.__coupled.events.forEach(function(a){a.remove()}),delete b.__coupled}};var e;e=d instanceof a.Model?{"form.submit":"submit","input.change":"set","input.edit":function(a,c){var e=d.checkValidation(a,c);e?b.validationSucceeded(a,c):b.validationFailed([{property:name}])}}:{"form.submit":"submit"};var f=function(a,c){var e="function"==typeof c?c:d[c].bind(d),f=b.on(a,e);b.__coupled.events.push(f)};for(var g in e)e.hasOwnProperty(g)&&f(g,e[g]);console.log("VIEW",b),console.log("MODE or LIST",d)},/**
     * Initialize a new view into the presenter scope
     *
     * options: {
     *   mode: String       Insert mode, (append, prepend or replace) replace is default
     *   inject: Boolean    Set to false to disable injecting view into the DOM
     *   forms: Boolean|String     View has forms. Add a selector here or set this to true to find all forms
     * }
     * 
     * @method initView
     * @public
     * @param  {String} viewName  Name of the view
     * @param  {String} container Container selector, default is 'body'
     * @param  {Object} options   View options
     * @return {Object}           Returns a view object
     */
d.prototype.initView=function(b,c,d){d=d||{};var e={};d.viewDir&&(e.viewDir=d.viewDir);var f=new a.View(b,function(f){f.template=a.Tmpl.getTemplate(b,e),f.mode=d.mode||"replace",f.container=c||"body",f.hidden=!!d.hidden,f.forms=d.forms,d.inject===!1&&(f.autoInject=!1)});this.__views[b]=f;var g=this;return a.html5Routes&&f.on("xqcore.navigate",function(a){g.router.callRoute(a)}),f},d.prototype.initFormView=function(a,b,c){},/**
     * Register a route listener
     *
     * @public
     * @method route
     * @chainable
     * @param {String | Array} route Route string
     * @param {Function} callback Callback function
     * @returns {Object} Returns this value
     */
d.prototype.route=function(a,b){var d=this;return"string"==typeof b&&(b=this[b]),"function"==typeof b?"string"==typeof a?this.router.addRoute(a,b):Array.isArray(a)&&a.forEach(function(a){d.router.addRoute(a,b)}):c.warn("Router callback isn't a function",b,"of route",a),this},/**
     * Return Presenter
     */
a.Presenter=d}(XQCore),/**
 * XQCore.Sync
 *
 * @module  XQCore.Sync
 */
function(a,b){"use strict";var c=a.require("jquery"),d=function(){/**
		 * Sets a server URI
		 *
		 * This URI is used by all send methods as default server URI
		 * @property {String} server
		 */
this.server=null};/**
	 * Called on before sending an ajax request
	 * You can use this function to manipulate all data they be send to the server
	 *
	 * @param {Object} data The data to send to the server
	 * @return {Object} data
	 */
d.prototype.onSend=function(a){return a},/**
	 * Send an ajax request to the webserver.
	 *
	 * You must set the server URI first with model.server = 'http://example.com/post'
	 *
	 * @param {String} Method send method, GET, POST, PUT, DELETE (default POST)
	 * @param {String} url Server URL (optional, then model.server must be set)
	 * @param {Object} data The data to sent to the server
	 * @param {Function} callback Calls callback(err, data, status, jqXHR) if response was receiving
	 */
d.prototype.send=function(a,d,e,f){var g=this;"object"==typeof d?(f=e,e=d,d=this.server,a=a):"function"==typeof e?(f=e,e=this.toJSON()):e===b&&(e=this.toJSON()),a===b&&(a="POST"),d||(d=this.server),"GET"===a&&Array.isArray(e)&&(d=d.replace(/\/$/,"")+"/"+e.join("/"),e=null),
//Handle onSend
"function"==typeof this.onSend&&(e=this.onSend.call(this,e)),this.log("Send an ajax call to ",d,"with data: ",e),this.state("syncing"),c.ajax({url:d,type:a,data:JSON.stringify(e),dataType:"json",contentType:"application/json",headers:{Accept:"application/json"},success:function(a,b,c){"function"==typeof f&&f.call(g,null,a,b,c),g.state("success")},error:function(a,b,c){"function"==typeof f&&f.call(g,{type:b,http:c},null,b,a),g.state("failed")}})},/**
	 * Sends a POST to the Datastore
	 *
	 * @param {String} url Server URL (optional, then model.server must be set)
	 * @param  {Object}   data     Dato to sending
	 * @param  {Function} callback Calling on response
	 *
	 * callback: void function(err, data, status, jqXHR)
	 *
	 */
d.prototype.sendPOST=function(a,b,c){this.send("POST",a,b,c)},/**
	 * Sends a GET to the Datastore
	 *
	 * @param {String} url Server URL (optional, then model.server must be set)
	 * @param  {Object}   data     Dato to sending
	 * @param  {Function} callback Calling on response
	 *
	 * callback: void function(err, data, status, jqXHR)
	 *
	 */
d.prototype.sendGET=function(a,b,c){this.send("GET",a,b,c)},/**
	 * Sends a PUT to the Datastore
	 *
	 * @param {String} url Server URL (optional, then model.server must be set)
	 * @param  {Object}   data     Dato to sending
	 * @param  {Function} callback Calling on response
	 *
	 * callback: void function(err, data, status, jqXHR)
	 *
	 */
d.prototype.sendPUT=function(a,b,c){this.send("PUT",a,b,c)},/**
	 * Sends a DELETE to the Datastore
	 *
	 * @param {String} url Server URL (optional, then model.server must be set)
	 * @param  {Object}   data     Dato to sending
	 * @param  {Function} callback Calling on response
	 *
	 * callback: void function(err, data, status, jqXHR)
	 *
	 */
d.prototype.sendDELETE=function(a,b,c){this.send("DELETE",a,b,c)},/**
	 * Fetch data from server
	 *
	 * @param {Object} query MongoDB query 
	 * @param {Function} callback Callback function
	 */
d.prototype.fetch=function(a,b){this.sendGET(a,b)},/**
	 * Save a model if it's valid
	 */
d.prototype.save=function(a,b){"function"==typeof a&&(b=a,a=this.schema?this.getByKeys(Object.keys(this.schema)):this.toJSON()),this.isValid()?this.sendPOST(a,b):"function"==typeof b&&b({msg:"Model isn't valid. Cancle save"})},/**
	 * Update a model if it's valid
	 */
d.prototype.update=function(a,b){"function"==typeof a&&(b=a,a=this.schema?this.getByKeys(Object.keys(this.schema)):this.toJSON()),this.isValid()?this.sendPUT(a,b):"function"==typeof b&&b({msg:"Model isn't valid. Cancel update"})},/**
	 * To be called when a form was submited in a coupled model
	 *
	 * This method merges submited form data with model.
	 * If validation doesen't fail, update or save methode have to be called.
	 * It calls update if data.id is not undefined, otherwise it calls save
	 * Override this function if this behavior isn't desired 
	 * 
	 * @method sync
	 * @override
	 * @param  {Any} data     data
	 */
d.prototype.submit=function(a){if(this.set(a,{extend:!0})){if(this.server){if(a.id===b||null===a.id)return void this.save(a);this.update(a)}this.emit("data.submit",a)}},a.Sync=d}(XQCore),/**
 * XQCore Model
 *  
 * @module  XQCore.Model
 * @requires XQCore.Utils
 * @requires XQCore.Event
 * @requires XQCore.Logger
 */
function(XQCore,undefined){"use strict";var Model;Model=function(a,b){
//Call XQCore.ReadyState constructor
XQCore.ReadyState.call(this),
//Call Event constructor
XQCore.Event.call(this),"object"==typeof arguments[0]&&(b=a,a=b.name),/**
         * Enable debug mode
         * @public
         * @type {Boolean}
         */
this.logLevel=XQCore.logLevel,/**
         * Stores models properties
         * @type {Object}
         * @property properties
         */
this.properties={},/**
         * Contains last validation errors if state is invalid
         * @type {Array}
         * @property lastValidationErr
         */
this.lastValidationErr=null,b===undefined&&(b={}),"function"==typeof b?b.call(this,this):XQCore.extend(this,b),this.__state="starting",this.__unfiltered={},this.customValidate=b.validate,delete b.validate,this.conf=b,this.name=(a?a.replace(/Model$/,""):"Nameless")+"Model",this.__isValid=!1,
//Add default values
this.defaults&&!XQCore.isEmptyObject(this.defaults)&&this.set(this.defaults,{silent:!0,noValidation:!0}),
//Add schema props as default values
this.schema&&Object.keys(this.schema).forEach(function(a){a in this.properties||(this.properties[a]=this.schema[a]["default"]!==undefined?this.schema[a]["default"]:null)},this),this.__isValid=!this.schema,this.state("ready")},XQCore.extend(Model.prototype,XQCore.ReadyState.prototype),XQCore.extend(Model.prototype,XQCore.Event.prototype),XQCore.extend(Model.prototype,new XQCore.Logger),XQCore.Sync&&XQCore.extend(Model.prototype,XQCore.Sync.prototype),Model.inherit=function(a,b){"object"==typeof a&&(b=a,a=undefined);var c=function(c,d){XQCore.Model.call(this,a,b),c&&("string"==typeof c?a=c:d=c,"function"==typeof d?d.call(this,this):"object"==typeof d&&XQCore.extend(this,d))};return c.prototype=Object.create(XQCore.Model.prototype),c.prototype.constructor=c,c},Model.prototype.init=function(){console.warn("Model.init is deprecated since v0.10.0")},Model.prototype.state=function(a){this.__state=a,this.emit("state."+a),this.emit("state.change",a)},Model.prototype.getState=function(){return this.__state},Model.prototype.set=function(a,b,c){var d,e={},f=this.get(),g=!1,h=!1;if(c=c||{},null===arguments[0]?(e=arguments[1],h=!0,this.log("Set data",e,f)):"object"==typeof arguments[0]?(c=b||{},e=c.replace?arguments[0]:XQCore.extend(e,f,arguments[0]),h=!0,a=null,this.log("Set data",e,f)):"string"==typeof arguments[0]?(e=XQCore.extend({},this.get()),g=!0,XQCore.dedotify(e,a,b),this.log("Set value",a,b,f)):this.warn("Data are incorrect in model.set()",arguments),c=c||{},c.noValidation!==!0){if(this.customValidate)this.log("Using a custom validation!"),d=this.customValidate(e);else if(this.schema&&(d=this.validate(e),g&&d)){for(var i,j=0,k=d.length;k>j;j++)if(d[j].property===a){i=[d[j]];break}d=i||null}if(d)return this.warn("Validation error",d),c.silent!==!0&&this.emit("validation.error",d,e),Promise.reject({msg:"validation.error",err:d})}return this.properties=e,c.silent!==!0&&(h?c.noSync||"function"!=typeof this.sync?this.emit(c.replace?"data.replace":"data.set",e,f):this.sync(c.replace?"replace":"set",e):g&&(c.noSync||"function"!=typeof this.sync||this.sync("value",a,b),this.emit("value.set",a,b)),this.emit("data.change",e,f)),Promise.resolve(e)},Model.prototype.get=function(key,options){options===undefined&&(options={});var data;if("object"==typeof key&&1===arguments.length&&(options=key,key=null),key===undefined||null===key){if(options.copy===!0)switch(data=this.properties,typeof data){case"object":return Array.isArray(data)?data.slice():XQCore.extend(!0,{},data);case"function":return eval("("+data.toString()+")");default:return data}return this.properties}if("string"==typeof key&&"number"==typeof options){var index=options;3===arguments.length&&(options=arguments[2]);var item=this.get(key);return options.copy===!0&&"object"==typeof item[index]?XQCore.extend({},item[index]):item?item[index]:null}if(options.copy===!0)switch(data=XQCore.undotify(key,this.properties),typeof data){case"object":return Array.isArray(data)?data.slice():XQCore.extend(!0,{},data);case"function":return eval("("+data.toString()+")");default:return data}return XQCore.undotify(key,this.properties)},Model.prototype.getByKeys=function(a,b){if("object"!=typeof a)throw new Error("First param must be an object or array in Model.getByKeys()!");var c={};if(b=b||this.get(),Array.isArray(a))a.forEach(function(a){-1===a.indexOf(".")?c[a]=b[a]:c=XQCore.dedotify(c,a,XQCore.undotify(a,b))});else for(var d in a)if(a.hasOwnProperty(d)){var e=b[d];"object"==typeof e?c[d]=this.getByKeys(a[d],b[d]):c[d]=b[d]}return c},Model.prototype.has=function(a){var b=!0,c=this.properties;a=a.split(".");for(var d=0,e=a.length;e>d;d++){if("object"!=typeof c||!c.hasOwnProperty(a[d])){b=!1;break}c=c[a[d]]}return b},Model.prototype.reset=function(a){a=a||{},this.log("Reset model");var b=this.get();return this.properties=XQCore.extend({},this.defaults),this.state("starting"),a.silent||this.emit("data.reset",b),a.removeListener&&this.clearEvents(),a.noSync||"function"==typeof this.sync&&this.sync("reset",b),b},Model.prototype.push=function(a,b,c){var d=XQCore.undotify(a,this.properties);if(c=c||{},d instanceof Array)d.push(b);else if("undefined"==typeof d)XQCore.dedotify(this.properties,a,[b]);else{if("object"!=typeof d||a||!XQCore.isEmptyObject(this.properties))return void this.error("Model.push requires an array. Dataset isn't an array. Path: ",a);this.properties=[b]}c.silent!==!0&&(c.noSync||"function"!=typeof this.sync||this.sync("insert",a,-1,b),this.emit("item.insert",a,-1,b),this.emit("data.change",this.properties))},Model.prototype.unshift=function(a,b,c){var d=XQCore.undotify(a,this.properties);if(c=c||{},d instanceof Array)d.unshift(b);else if("undefined"==typeof d)XQCore.dedotify(this.properties,a,[b]);else{if("object"!=typeof d||a||!XQCore.isEmptyObject(this.properties))return void this.error("Model.unshift requires an array. Dataset isn't an array. Path: ",a);this.properties=[b]}c.silent!==!0&&(c.noSync||"function"!=typeof this.sync||this.sync("insert",a,0,b),this.emit("item.insert",a,0,b),this.emit("data.change",this.properties))},Model.prototype.insert=function(a,b,c,d){var e=XQCore.undotify(a,this.properties);if(d=d||{},e instanceof Array)-1===b?e.push(c):0===b?e.unshift(c):e.splice(b,0,c);else{if(e)return void this.error("Model.insert requires an array. Dataset isn't an array. Path: ",a);XQCore.dedotify(this.properties,a,[c])}d.silent!==!0&&(d.noSync||"function"!=typeof this.sync||this.sync("insert",a,b,c),this.emit("item.insert",a,b,c),this.emit("data.change",this.properties))},Model.prototype.remove=function(a,b,c){var d=XQCore.undotify(a,this.properties),e=null;if(c=c||{},d instanceof Array)e=d.splice(b,1);else if("object"==typeof d)return void this.error("Model.remove requires an array. Dataset isn't an array. Path: ",a);return e&&c.silent!==!0&&(c.noSync||"function"!=typeof this.sync||this.sync("remove",a,b),this.emit("item.remove",a,b,e[0]),this.emit("data.change",this.properties)),e},Model.prototype.replace=function(a,b){return b=b||{},b.replace=!0,this.set(a,b)},Model.prototype.search=function(a,b){var c;if(1===arguments.length?(b=a,a="",c=this.properties):c=a?XQCore.undotify(a,this.properties):this.properties,c)for(var d=0;d<c.length;d++){var e,f=c[d];for(var g in b)if(b.hasOwnProperty(g)){if(f[g]&&f[g]===b[g]){e=!0;break}e=!1}if(e===!0)return f}return null},Model.prototype.update=function(a,b,c,d){var e;d=d||{},e="number"==typeof b?this.get(a,b):this.search(a,b);var f=XQCore.extend({},e);e&&(XQCore.extend(e,c),d.silent!==!0&&(this.emit("data.update",a,b,c,f),this.emit("data.change",this.properties)),d.noSync||"function"!=typeof this.sync||this.sync("update",a,b,c))},Model.prototype.sortBy=function(a,b){1===arguments.length&&(b=a,a=null);var c,d=XQCore.undotify(a,this.properties);return Array.isArray(d)?(d.sort(function(a,d){c=-1;for(var e in b)if(b.hasOwnProperty(e)){if(c=String(XQCore.undotify(e,a)).localeCompare(String(XQCore.undotify(e,d))),0===c)continue;-1===b[e]&&(c=c>0?-1:1);break}return c}),this.set(a,d),d):(this.warn("Could not sort data of type",typeof d),[])},Model.prototype.filter=function(a,b,c,d){if(1===arguments.length&&(d=a,a=null),"string"==typeof d){if(!this.__registeredFilter[d])throw new Error("Filter "+d+" not registered!");d=this.__registeredFilter[d]}for(var e=XQCore.undotify(a,this.__unfiltered.data||this.properties),f=[],g=0,h=e.length;h>g;g++)d(b,c,e[g])&&f.push(e[g]);return this.__unfiltered={path:a,data:e},this.set(a,f),f},Model.prototype.filterReset=function(a){this.__unfiltered&&this.set(this.__unfiltered.path,this.__unfiltered.data,a)},Model.prototype.validate=function(a,b){var c=this,d=[];return b=b||this.schema,b&&Object.keys(b).forEach(function(e){if("object"==typeof a[e]&&"undefined"==typeof b[e].type){var f=c.validate(XQCore.extend({},a[e]),XQCore.extend({},b[e]));return void(Array.isArray(f)&&f.length>0&&(d=d.concat(f)))}var g=c.validateOne(b[e],a[e]);g.isValid===!0?a[e]=g.value:(g.error.property=e,d.push(g.error))}),0===d.length?(this.__isValid=!0,this.lastValidationErr=null,this.state("valid"),null):(this.__isValid=!1,this.lastValidationErr=d,this.state("invalid"),d)},Model.prototype.validateOne=function(a,b,c){var d,e="function"==typeof a.type?typeof a.type():a.type.toLowerCase();if(""===b&&a.noEmpty===!0&&(b=undefined),b!==undefined&&null!==b&&""!==b||!a["default"]||(b=a["default"]),b===undefined||null===b||""===b)a.required===!0&&(d={msg:"Property is undefined or null, but it's required",errCode:10});else{if(!this.__registeredValidations[e])throw new Error("Undefined schema type",a);d=this.__registeredValidations[e].call(this,b,a)}return d=d===undefined?{isValid:!0,value:b,error:null}:{isValid:!1,value:b,error:d}},Model.prototype.checkValidation=function(a,b){var c=this.validateOne(this.schema[a],b,a);return c.isValid},Model.prototype.isValid=function(){return this.__isValid},Model.prototype.setData=function(a,b){this.warn("Model.setData has been deprecated since v0.9"),this.set(a,{extend:!0})},Model.registerFilter=function(a,b){if("function"!=typeof b)throw new Error("Filter function isn't a function");var c="function"==typeof this?Model.prototype:this;c.__registeredFilter[a]=b},Model.prototype.registerFilter=Model.registerFilter,Model.prototype.__registeredFilter={quicksearch:function(a,b,c){var d=XQCore.undotify(a,c),e=new RegExp(b.replace(/[a-z0-9äüöß]/g,"$&.*"),"i");return e.test(d)}},Model.registerValidation=function(a,b){var c="function"==typeof this?Model.prototype:this;c.__registeredValidations[a]=b},Model.prototype.registerValidation=Model.registerValidation,Model.prototype.__registeredValidations={string:function(a,b){return b.convert&&"number"==typeof a&&(a=String(a)),"string"!=typeof a?{msg:"Property type is a "+typeof a+", but a string is required",errCode:11}:b.min&&b.min>a.length?{msg:"String length is too short",errCode:12}:b.max&&b.max<a.length?{msg:"String length is too long",errCode:13}:b.match&&!b.match.test(a)?{msg:"String doesn't match regexp",errCode:14}:void 0},number:function(a,b){return b.convert&&"string"==typeof a&&(a=parseInt(a,10)),"number"!=typeof a||isNaN(a)?{msg:"Property type is not a valid number",errCode:21}:b.min&&b.min>a?{msg:"Number is too low",errCode:22}:b.max&&b.max<a?{msg:"Number is too high",errCode:23}:void 0},date:function(a,b){if(a){var c=Date.parse(a);if(isNaN(c))return{msg:"Property isn't a valid date",errCode:31}}},array:function(a,b){return Array.isArray(a)?b.min&&b.min>a.length?{msg:"Array length is "+a.length+" but must be greater than "+b.min,errCode:42}:b.max&&b.max<a.length?{msg:"Array length is "+a.length+" but must be lesser than "+b.max,errCode:43}:void 0:{msg:"Property type is a "+typeof a+", but an array is required",errCode:41}},object:function(a,b){return"object"!=typeof a?{msg:"Property isn't a valid object",errCode:51}:void 0},objectid:function(a,b){return/^[a-zA-Z0-9]{24}$/.test(a)?void 0:{msg:"Property isn't a valid objectId",errCode:52}},"boolean":function(a,b){return"boolean"!=typeof a?{msg:"Property isn't a valid boolean",errCode:61}:void 0},time:function(a,b){return/^\d+(:\d{2}){1,3}$/.test(a)?void 0:{msg:"Property isn't a valid time",errCode:71}},email:function(a,b){return/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)?void 0:{msg:"Property isn't a valid email",errCode:72}}},Model.prototype.toJSON=function(){return this.get()},XQCore.Model=Model}(XQCore),/**
 * Template module
 *
 * @module XQCore.Tmpl
 */
/*global define:false */
function(a,b){"use strict";if("function"==typeof define&&define.amd)define("xqcore",[XQCore.templateEngine],b);else if("undefined"!=typeof module&&module.exports)module.exports=b(require(XQCore.templateEngine));else{var c="firetpl"===XQCore.templateEngine?"FireTPL":"Handlebars";a.XQCore=b(a[c])}}(this,function(a){"use strict";return XQCore.Tmpl={type:XQCore.templateEngine,compile:a.compile,getTemplate:function(b,c){if(c=c||{},"firetpl"===XQCore.templateEngine){var d=a;if(d.templateCache&&d.templateCache[b])return d.templateCache[b];if(d.loadFile){var e=c.viewDir||XQCore.viewsDir,f=d.readFile(e.replace(/\/$/,"")+"/"+b+"."+XQCore.viewExt.replace(/^\./,""));return d.compile(f,{eventAttrs:!0})}throw new Error("FireTPL runtime is being used. Please preload the "+b+"View")}}},XQCore}),/**
 * XQCore View module
 *
 * A view renders a .fire or .hbs template and injects the result into the dom.
 *
 * @module XQCore.View
 * @returns {object} Returns a XQCore.View prototype object
 */
function(a,b){"use strict";var c,d=a.require("jquery"),e=function(e,f){
//Call Event constructor
a.Event.call(this),"object"==typeof arguments[0]||"function"==typeof arguments[0]?(f=e,e=null):"string"==typeof arguments[0]&&(this.name=e),c=new a.Logger(this.name+"View"),this.container="body",this.tag=b,this.className=b,this.id=b,this.mode="replace",this.autoInject=!0,this.__domReady=!1,this.__viewEvents=[];var g=this;"function"==typeof f?f.call(this,g):a.extend(this,f),/**
         * Set view name
         * @public
         * @type {String}
         */
this.name=(this.name?this.name.replace(/View$/,""):"Nameless")+"View",this.__createView(),d(function(){g.container.length>0?(window.addEventListener("resize",function(a){g.resize(a)},!1),c.info("Initialize view "+this.name," with conf:",f),c.info(" ... using Container:",g.container)):c.error("Can't initialize View, Container not found!",g.container)})};a.extend(e.prototype,a.Event.prototype),/**
     * Show view if it is invisible
     *
     * @method show
     * @param {Boolean} hideOther Hide all other sibling views
     * @chainable
     * @fires view.show Fires a v`view.show` event
     * @returns {Object} Returns this value
     */
e.prototype.show=function(a){var b=this;return a&&b.$ct.children(".xq-view").each(function(){if(this!==b.el){var a=d(this).data("view");a.hide()}}),this.$el.show().removeClass("xq-hidden"),this.emit("view.show"),this},/**
     * Hide view
     * 
     * @method hide
     * @chainable
     * @fires view.hide Fires a v`view.hide` event
     * @return {Object} Returns this value
     */
e.prototype.hide=function(){return this.$el.hide().addClass("xq-hidden"),this.emit("view.hide"),this},/**
     * Marks a view as active, optionally inactivates all other sibling views
     *
     * @method active
     * @param {Boolean} inactivateOther Makes all other sibling views inactive
     * @chainable
     * @fires view.active Fires a v`view.active` event
     * @returns {Object} Returns this value
     */
e.prototype.active=function(a){var b=this;return a&&b.$ct.children(".xq-view").each(function(){if(this!==b.el){var a=d(this).data("view");a.inactive()}}),this.$el.addClass("xq-active").removeClass("xq-inactive"),this.emit("view.active"),this},/**
     * Marks a view as inactive
     * 
     * @method inactivate
     * @chainable
     * @fires view.inactive Fires a v`view.inactive` event
     * @return {Object} Returns this value
     */
e.prototype.inactive=function(){return this.$el.removeClass("xq-active").addClass("xq-inactive"),this.emit("view.inactive"),this},e.prototype.renderHTML=function(b,d){return c.log("Render html snippet",b,"with data:",d),(b="function"==typeof b?b:a.Tmpl.compile(b))(d)},/**
     * To be called if window resizes
     * This is a placeholder method. Override this method if its needed
     *
     * @overridable
     * @return {Object} Returns this value
     */
e.prototype.resize=function(){return this},/**
     * Gets the data of an element
     *
     * @param {Object} selector DOM el or a jQuery selector of the element
     *
     * @return {Object} Returns the data of an element or null
     */
e.prototype.getElementData=function(a){var c=d(a,this.container);if(c.length){var e,f={},g=c.get(0).attributes;for(e=0;e<g.length;e++)if(0===g[e].name.indexOf("data-")){var h=g[e].name.substr(5),i=g[e].value;if("string"==typeof i)try{i="true"===i||"TRUE"===i?!0:"false"===i||"FALSE"===i?!1:"null"===i||"NULL"===i?null:"undefined"===i?b:+i+""===i?+i:JSON.parse(i)}catch(j){}f[h]=i}return f}return null},/**
     * If a validation failed (Automatically called in a coupled view)
     *
     * @method validationFailed
     * @param {Object} err Validation error object
     */
e.prototype.validationFailed=function(a,b){var c=this;a.forEach(function(a){c.$el.find('[name="'+a.property+'"]').addClass("xq-invalid")})},/**
     * If a validation succeeds (Automatically called in a coupled view)
     *
     * @method validationSucceeded
     * @param {String} name Input name
     * @param {String} value Input value
     */
e.prototype.validationSucceeded=function(a,b){var c=this;c.$el.find('[name="'+a+'"]').removeClass("xq-invalid")},/**
     * To be called when a state.change event from a coupled model was revived
     *
     * @param {String} state Model state
     * @override
     */
e.prototype.onStateChange=function(a){var b=this.el.className.split(" ");b=b.filter(function(a){return!/^xq-state-/.test(a)}),b.push("xq-state-"+a),this.el.className=b.join(" ")},/**
     * Wait till view is ready
     *
     * @method ready
     * @param {Function} callback Callback
     */
e.prototype.ready=function(a){this.isReady?a.call(this):(this.__readyCallbacks||(this.__readyCallbacks=[]),this.__readyCallbacks.push(a))},e.prototype.__setReadyState=function(){var a=this;this.isReady=!0,this.__readyCallbacks&&(this.__readyCallbacks.forEach(function(b){b.call(a)}),this.__readyCallbacks=[])},/**
     * Inject element into the DOM
     *
     * @public
     * @method inject
     */
e.prototype.inject=function(){var a=this.isElementInDOM(this.ct);if(this.el.parentNode!==this.ct||!a)if(a||(this.$ct=d(this.container),this.ct=this.$ct.get(0)),c.info("Inject view into container",this.$ct),"replace"===this.mode){var b=this.$ct.contents();b.each(function(){var a=d(this).data("view");a?a.destroy():d(this).remove()}),
// this.$ct.contents().detach();
this.$ct.append(this.$el)}else if("append"===this.mode)this.$ct.append(this.$el);else{if("prepend"!==this.mode)throw new Error("Unknown insert mode in view constructor");this.$ct.prepend(this.$el)}},/**
     * Parse a precompiled template and returns a html string
     *
     * @method parse
     *
     * @param {Function} template Precompiled template
     * @param {Object} data Data object
     *
     * @return {String} compiled html
     */
e.prototype.parse=function(a,b,e){var f,g;a.scopeStore={},a.scopes=e||{};try{f=a(b||{},a.scopes)}catch(h){f='<p class="renderError"><b>View render error!</b><br>'+h.message+"</p>",c.error("View render error!",h)}var i=function(b,c,e){b=d.parseHTML(b);var f=d(b),g=f.find("scope"),h={};return g.each(function(){var b,f=d(this).attr("id"),g=d(this).attr("path"),j=e?e+"."+g:g,k=c;if(Array.isArray(c)&&(h[g]=h[g]||0,k=c[h[g]++]),b={},f){var l=a.scopes[f](c[g],c);b.value=l?i(l,c[g],j):document.createTextNode(""),b.id=f}else b.value=d.parseHTML(c[g]);a.scopeStore[j]=a.scopeStore[j]||[],a.scopeStore[j].push(b),d(this).replaceWith(d(b.value))}),f};return f&&(g=i(f,b)),g},/**
     * Render view
     *
     * @method render
     * @chainable
     * @emits content.change
     *
     * @param  {Object} data Render data
     * @returns {Object} Returns this value
     */
e.prototype._render=function(b){if(this.__domReady===!1)return this.__initialData=b||{},this;this.autoInject&&this.inject();var d;c.info("Render view template of view "+this.name,"with data:",b);var e="function"==typeof this.template?this.template:a.Tmpl.compile(this.template);this.scopes={};try{d=e(b||{},this.scopes)}catch(f){d='<p class="renderError"><b>View render error!</b><br>'+f.message+"</p>",c.error("View render error!",f)}return this.el.innerHTML=d,this.emit("content.change",b),this.registerListener(this.$el),this.registerForms(),this},/**
     * Render view
     *
     * @method render
     * @chainable
     * @emits content.change
     *
     * @param  {Object} data Render data
     * @returns {Object} Returns this value
     */
e.prototype.render=function(b){if(this.__domReady===!1)return this.__initialData=b||{},this;this.autoInject&&this.inject();var e;c.info("Render view template of view "+this.name,"with data:",b);var f="function"==typeof this.template?this.template:a.Tmpl.compile(this.template);this.scopes={dataFn:function(a,b){return'<ftl path="'+a+'">'+b[a]+"</ftl>"},scopeFn:function(a,b,c){return"data"===b&&Array.isArray(c)&&(b="_ftl_root"),'<ftl scope="'+a+'" path="'+b+'"></ftl>'},attrFn:function(a,b){var c=b.replace(/<ftl path="([a-zA-Z0-9_.-]+)">(.+?)<\/ftl>/g,function(a,b,c){return c}),d=b.replace(/<ftl path="([a-zA-Z0-9_.-]+)">(.+?)<\/ftl>/g,function(a,b,c){return"%s"}),e=a+'="'+c+'" xq-'+a+'="'+d+'"';return e}};try{e=f(b||{},this.scopes)}catch(g){e='<p class="renderError"><b>View render error!</b><br>'+g.message+"</p>",c.error("View render error!",g)}this.el.innerHTML=e;var h=this;
//Replace scopes
return this.scopesMap={},this.$el.find("ftl").each(function(){var a=d(this).attr("scope"),c=d(this).attr("path");a?h.replaceScopes(d(this),a,b,c,c):h.replaceNode(d(this),c)}),console.log("Scopes map",this.scopesMap),this.emit("content.change",b),this.registerListener(this.$el),this.registerForms(),this},e.prototype.replaceScopes=function(a,b,c,e,f){console.log("Replace scope",b,c,e);var g=this,h=e&&"_ftl_root"!==e?c[e]:c,i=g.scopes[b](h,c),j=d(d.parseHTML(i)),k=a.parent();if(
//Replace scopes
j.find("ftl").each(function(){var a=d(this).attr("scope"),b=d(this).attr("path");a?g.replaceScopes(d(this),a,h,b,f+(Array.isArray(h)?"[].":".")+b):g.replaceNode(d(this),f+(Array.isArray(h)?"[].":".")+b)}),a.replaceWith(j),-1===f.indexOf("[].")){f in g.scopesMap||(g.scopesMap[f]=[]);var l=function(a){if(!Array.isArray(h))return[a];var b=a.length/h.length,c=[],e=[];return a.each(function(){e.push(d(this).get(0)),e.length===b&&(c.push(e),e=[])}),c};g.scopesMap[f].push({type:"scope",fn:g.scopes[b],childs:l(j,h),parentData:c,parent:k})}},e.prototype.replaceNode=function(a,b){console.log("Replace node",b);var c=this,d=a.html(),e=document.createTextNode(d);a.replaceWith(e),-1===b.indexOf("[].")&&(b in c.scopesMap||(c.scopesMap[b]=[]),c.scopesMap[b].push({type:"node",node:e}))},e.prototype.renderScope=function(a,b,c){var e=this,f=d.parseHTML(a.fn(c,a.parentData)),g=d(f);return g.find("ftl").each(function(){var a=d(this).attr("scope"),b=d(this).attr("path");a?e.replaceScopes(d(this),a,c,b,b):e.replaceNode(d(this),b)}),this.registerListener(g),g},e.prototype.renderNode=function(a,b,c){a.node.nodeValue=c},e.prototype.registerListener=function(a){var b=this;a.find("[on]").addBack("[on]").each(function(){var a,c=d(this),e=d(this).attr("on"),f=d(this).data();c.removeAttr("on"),e=e.split(";"),e.forEach(function(d){d=d.split(":"),a="submit"===d[0]?function(a){a.preventDefault(),f=b.serializeForm(a.target),f=b.onSubmit(f,a.target),b.emit(d[1],f,a)}:function(a){var c;a.originalEvent instanceof KeyboardEvent?c={key:a.key,code:a.keyCode,alt:a.altKey,ctrl:a.ctrlKey,meta:a.metaKey,shift:a.shiftKey}:a.originalEvent instanceof MouseEvent?(a.preventDefault(),c={button:a.button,alt:a.altKey,ctrl:a.ctrlKey,meta:a.metaKey,shift:a.shiftKey},"click"===a.type&&a.currentTarget.href&&(c.href=a.currentTarget.href)):(a.preventDefault(),c=a.currentTarget.value||""),b.emit(d[1],c,f,a)},c.bind(d[0],a)})})},/**
     * Serialize a form and return its values as JSON
     *
     * @param {Object} Form selector
     * @return {Object} FormData as JSON
     */
e.prototype.serializeForm=function(b){var e={},f=d(b);return"INPUT"!==f.get(0).tagName&&(f=f.find(":input")),f.serializeArray().forEach(function(b){a.dedotify(e,b.name,b.value)}),c.info("Serialize form of view "+this.name,"form selector:",f,"form data:",e),e},/**
     * Insert a subset
     * @param  {String} path  Data path
     * @param  {Number} index Index after which item the insert should be happen or use -1 to prepend
     * @param  {Object} data  Item data
     */
e.prototype.insert=function(a,b,c){var e=this;console.log("INSERT new item",a,b,c),a in this.scopesMap&&(console.log(" matched items",this.scopesMap[a]),this.scopesMap[a].forEach(function(f){var g=e.renderScope(f,a,[c]);if(-1===b)f.parent.append(g),f.childs.push([g.get()]);else if(0===b)f.parent.prepend(g),f.childs.unshift([g.get()]);else{var h=f.childs[b];d(h[0]).before(g);var i=[b,0].concat([g.get()]);f.childs.splice.apply(f.childs,i)}}))},e.prototype.update=function(a,b){c.warn("XQCore doesn`t support update events yet")},e.prototype.append=function(a,b){1===arguments.length&&(b=a,a="data"),this.insert(a,-1,b)},e.prototype.prepend=function(a,b){1===arguments.length&&(b=a,a="data"),this.insert(a,0,b)},/**
     * Remove an item from a subset. Removes the item with the given index.
     * If index is negative number it will be removed from the end
     * 
     * @param  {String} path  data path
     * @param  {Number} index Index of the item
     */
e.prototype.remove=function(a,b){console.log("REMOVE item",a,b),a in this.scopesMap&&(console.log(" matched items",this.scopesMap[a]),this.scopesMap[a].forEach(function(a){var c=a.childs[b];Array.isArray(c)?c.forEach(function(a){d(a).remove()}):d(c).remove(),a.childs.splice(b,1)}))},e.prototype.removeLast=function(a){c.warn("XQCore doesn`t support pop events yet")},e.prototype.removeFirst=function(a){c.warn("XQCore doesn`t support shift events yet")},e.prototype.change=function(a,b){var c=this;this.ready(function(){a in this.scopesMap&&(console.log(" change item",this.scopesMap[a]),this.scopesMap[a].forEach(function(d){"node"===d.type&&c.renderNode(d,a,b)}))})},/**
     * Seting up forms
     * It's wating till view is ready
     * @param  {Object} model Coupled model
     * @param  {Object} $el   Form element
     */
e.prototype.formSetup=function(a,b){var c=this;this.ready(function(){
// var errClassName = 'xq-invalid',
// disabledClass = 'xq-disabled';
// if (!$el) {
//     $el = this.$el.find('form');
// }
var a=function(a){var b=a.target.value,d=a.target.name;c.emit("input.change",d,b)},b=function(a){var b=a.target.value,d=a.target.name;c.emit("input.edit",d,b)},d=function(a){a.preventDefault();var b=c.serializeForm(a.target);c.emit("form.submit",b)};this.addEvent(":input","change",a),this.addEvent(":input","keyup",b),this.addEvent("form","submit",d)})},/**
     * Called on submiting a form. 
     * 
     * @method onSubmit
     * @param {Object} data Form data
     * @param {Object} $form jQuery selector of the submited form
     * @returns {Object} Changed form data
     */
e.prototype.onSubmit=function(a,b){return a},/**
     * Removes a view from dom and unregisters all its listener
     *
     * @fires view.destroy Fires a `view.destroy` event before view is removing from dom.
     * @return {[type]} [description]
     */
e.prototype.destroy=function(){c.info("Destroy view"),this.emit("view.destroy"),this.$el.remove(),this.__coupled&&(
//Uncouple other participate
this.__coupled.obj.__coupled&&this.__coupled.obj.__coupled.obj===this&&this.__coupled.obj.__coupled.uncouple(),this.__coupled.uncouple()),
//TODO remove all events
c.info("View "+this.name+" has been destroyed")},/**
     * Register a DOM event listerner for a given element. The DOM element mustnt exists at this time. (Using jQuery.deleget() on the this.$el element)
     * @param {String}   selector A selector to the item that should trigger the event
     * @param {String}   events   A string of on ore more Javascript event handler. Use a space separated list for mor then one event. E.g: 'click mousedown'
     * @param {Function} callback Callback function to be called when event is triggered
     */
e.prototype.addEvent=function(a,b,c){this.__viewEvents.push({events:b,selector:a,callback:c}),this.$el&&this.$el.delegate(a,b,c)},/**
     * Defines a container -> view tag type mapping
     * 
     * @private true
     * @type {Object}
     */
e.prototype.__viewTagTypes={"*":"div",body:"section",section:"section",ul:"li",table:"tbody",tbody:"tr",tr:"td"},/**
     * Creates new view element, based on *tag* option
     * 
     * @private true
     * @return {object} Returns a DOM element
     */
e.prototype.__createViewElement=function(){if(this.tag)return document.createElement(this.tag);var a=this.ct?this.ct.tagName.toLowerCase():"*",b=this.__viewTagTypes["*"];return this.__viewTagTypes[a]&&(b=this.__viewTagTypes[a]),document.createElement(b)},/**
     * Creates a view and registers event listeners as soon as DOM is ready.
     *
     * @private true
     */
e.prototype.__createView=function(){var b=this,c=[];d(function(){
//Create view element
b.$ct=b.$ct||d(b.container),b.ct=b.$ct.get(0),b.el=b.__createViewElement(),b.$el=d(b.el),b.$el.data("view",b),c.push("xq-view xq-"+b.name.replace(/View$/,"-view").toLowerCase()),b.id&&b.el.setAttribute("id",b.id),b.className&&c.push(b.className),b.hidden===!0&&(c.push("xq-hidden"),b.$el.hide()),b.el.className=c.join(" "),
//Set DOM ready state
b.__domReady=!0,b.__initialData&&(b.render(b.__initialData),delete b.__initialData),
// if (self.autoInject) {
//     self.inject();
// }
//Set ready state
b.__setReadyState(),b.registerListener(b.$el),
//Register view listener
a.html5Routes&&b.$el.on("click","a",function(a){/^http(s)?:\/\//.test(a.currentTarget.href)||/^\/?[a-z]/.test(a.currentTarget.href)&&(a.preventDefault(),a.stopPropagation(),b.emit("xqcore.navigate",a.currentTarget.href))}),b.forms&&b.formSetup()})},e.prototype.registerForms=function(){if(this.forms){var a="form";"string"==typeof this.forms&&(a=this.forms),this.ready(function(){this.$forms=this.$el.find(a),this.$forms.addClass("xq-forms"),this.$forms.find(":input").addClass("xq-input")})}},/**
     * Checks whether an element is in the DOM or not.
     *
     * @private
     * @param  {Object}  el DOM element wich sholld be checked
     * @return {Boolean}    Returns true if element is still in the DOM
     */
e.prototype.isElementInDOM=function(a){for(;a;){if(a===document.body)return!0;a=a.parentNode}return!1},a.View=e}(XQCore),/**
 * XQCore router
 * 
 * Based on router.js v2.1.0
 * Copyright Aaron Blohowiak and TJ Holowaychuk 2011.
 * https://github.com/aaronblohowiak/routes.js
 *
 * @module  XQCore.Router
 *
 * @example
 *
 * var router = XQCore.Router.getInstance(); //Returns a singelton
 * router.addRoute('/index', function() {
 *     // index route was called
 * });
 *
 * router.addRoute('/foo/:name', function(data) {
 *     // data.name contains the name part
 * });
 *
 * 
 */
function(a){"use strict";var b,c=new a.Logger("Router"),d=a.require("jquery"),e=function(b){var d,e,g=[];return c.logLevel=a.logLevel,b instanceof RegExp?(e=b,d=b.toString()):(e=f(b,g),d=b),{re:e,src:b.toString(),keys:g}},f=function(a,b){return a=a.concat("/?").replace(/\/\(/g,"(?:/").replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?|\*/g,function(a,c,d,e,f,g){return"*"===a?(b.push(void 0),a):(b.push(e),c=c||"",""+(g?"":c)+"(?:"+(g?c:"")+(d||"")+(f||"([^/]+?)")+")"+(g||""))}).replace(/([\/.])/g,"\\$1").replace(/\*/g,"(.*)"),new RegExp("^"+a+"$","i")},g=function(a,b,c){for(var d,e=c||0,f=a.length;f>e;++e){var g=a[e],h=g.re,i=g.keys,j=[],k={};if(d=b.match(h)){for(var l=1,m=d.length;m>l;++l){var n=i[l-1],o="string"==typeof d[l]?unescape(d[l]):d[l];n?k[n]=o:j.push(o)}return{params:k,splats:j,route:g.src,next:e+1}}}},h=function(a){a=a||{},this.routes=[],this.routeMap={},a.noListener||this.registerListener();var b=this;d(function(){
//Call current page
b.callRoute(b.getPath())})};/**
     * Returns a singelton instance of XQCore.Router
     * @return {[type]} [description]
     */
h.getInstance=function(){return b||(b=new a.Router),b},h.prototype.registerListener=function(){a.html5Routes?window.addEventListener("popstate",this.onPopStateHandler.bind(this)):window.addEventListener("hashchange",this.onPopStateHandler.bind(this))},h.prototype.onPopStateHandler=function(a){var b=this.getPath();this.callRoute(b,{noPush:!0})},h.prototype.getPath=function(){var b;return a.html5Routes?(b=location.pathname,b.replace(new RegExp("^"+a.basePath),"")):(b=location.hash,b=b.replace(new RegExp("^"+a.hashBang),""),b="/"+b)},/**
     * Registers a new route
     *
     * @method addRoute
     * @param {String}   path Route path
     * @param {Function} fn   Function to be called when addRoute will be called
     * @returns {Object} Returns this value
     * @chainable
     */
h.prototype.addRoute=function(a,b){if(c.info("Register new route:",a,b),!a)throw new Error(" route requires a path");if(!b)throw new Error(" route "+a.toString()+" requires a callback");if(this.routeMap[a])throw new Error("path is already defined: "+a);"string"==typeof a&&(a=a.replace(/\/$/,""),"/"!==a.charAt(0)&&(a="/"+a));var d=new e(a);return d.fn=b,this.routes.push(d),this.routeMap[a]=b,this},/**
     * Removes a route
     *
     * @method removeRoute
     * @param  {String} path Path to be removed
     * @return {Object}      Returns this value
     * @chainable
     */
h.prototype.removeRoute=function(a){if(!a)throw new Error(" route requires a path");if(!this.routeMap[a])return c.warn("Can not remove route! Route does not exists: "+a),this;for(var b=0;b<this.routes.length;b++){var d=this.routes[b];d.src===a&&this.routes.splice(b,1)}return delete this.routeMap[a],this},h.prototype.match=function(a,b){var c=g(this.routes,a,b);return c&&(c.fn=this.routeMap[c.route],c.next=this.match.bind(this,a,c.next)),c},/**
     * Calls a route
     *
     * Options:
     * --------
     * **noRoute** Doesn't add a push state item
     * **replace** Add a replace state item
     * 
     *
     * @method callRoute
     * @param  {String} path Route path
     * @param {Object} [options] Set options for route call
     * 
     */
h.prototype.callRoute=function(b,d){if(d=d||{},c.info("Call route",b),void 0===b)throw new Error("XQCore.Router error! Path is undefined in callRoute()!");var e=this.match(b);if(e.path=b,!e)return void c.warn("Could not call any route! No route were found! Called path: "+b);!a.html5Routes||d.noPush||d.replace?a.html5Routes&&d.replace&&history.replaceState(null,"",b):history.pushState(null,"",b);var f=function(){c.info("... trigger route",this.route,this.fn,this.next),this.fn.call(this,this.params,this.splats,function(){var a=this.next();a&&f.call(a)}.bind(this))};f.call(e)},a.Router=h}(XQCore),/**
 * Socket connection
 * Creates a socket connection to a socket server. Only one connection is used per server/port combination.
 *
 * @module XQCore.SocketConnection
 */
/*global XQCore:false */
function(a){"use strict";var b=new a.Logger("SocketConnection"),c=a.require("sockjs"),d={},e=function(a){
//Only one instance per socket server
/**
         * Holds all registered channels
         * @type {Object} __channels
         */
/**
         * Holds the SockJS instance
         * @private
         * @type {Object} SockJS instance
         */
/**
         * Reconnect if connection gets lost
         * @property {Boolean} autoReconnect
         */
/**
         * Defines a reconnection interval
         * @type {Number}
         */
return d[a]?d[a]:(d[a]=this,this.__isReady=!1,this.__onReadyCallbacks=[],this.__channels={},this.conn=null,this.connect(a),this.autoReconnect=!0,void(this.reconnectionInterval=1500))};/**
     * Connects to a socket server
     * @param  {String} url Socket server url
     */
e.prototype.connect=function(a){var d=this;this.conn&&"disconnected"!==this.connectionState||(b.info("Connect to socket server ",a),this.conn=new c(a,null,{debug:b.logLevel>=4}),this.connectionState="connecting",this.conn.onopen=function(){b.info("Connection was successful!"),d.setReady(),d.connectionState="connected"},this.conn.onmessage=function(a){var c;try{c=JSON.parse(a.data)}catch(e){console.error("Could not parse socket message!",a.data)}if(!c.channel)throw new Error("No socket channel was sent!");b.info("Got socket message",c.eventName,"in channel "+c.channel,c.args);var f=c.args||[];f.unshift(c.eventName),d.__channels[c.channel]?d.__channels[c.channel].emit.apply(d.__channels[c.channel],f):b.info(" ... channel not found!",c.channel)},this.conn.onclose=function(c){d.connectionState="disconnected",d.unsetReady(),b.warn("Connection to "+a+" closed!",c),d.autoReconnect&&(b.info("Try to reconnect to "+a),setTimeout(function(){d.connect(a)},d.reconnectionInterval))})},/**
     * Register a channel
     * @param  {String} channel  Channel name
     * @param  {Object} listener Socket object
     */
e.prototype.registerChannel=function(a,c){b.info("Register new channel",a),this.__channels[a]?b.info(" ... channel already registered!"):this.__channels[a]=c},/**
     * Unregister a channel
     * @param  {String} channel  Channel name
     * @param  {Object} listener Socket object
     */
e.prototype.unregisterChannel=function(a){b.info("Unregister channel",a),this.__channels[a]?delete this.__channels[a]:b.info(" ... channel not found!")},/**
     * Sends a socket message to a connected socket server
     *
     * @method send
     * @param {String} channel   Channel name
     * @param {String} eventName Event name
     * @param {Object} data      Data
     * 
     */
e.prototype.send=function(a,c,d){var e=this,f=Array.prototype.slice.call(arguments,2);this.ready(function(){b.info("Send socket message to channel "+a,c,f),e.conn.send(JSON.stringify({channel:a,eventName:c,args:f}))})},/**
     * Call function fn when socket is connected
     *
     * @method ready
     * @param  {Function} fn Function to be called if socket is ready
     */
e.prototype.ready=function(a){this.__isReady?a.call(this):this.__onReadyCallbacks.push(a)},/**
     * Sets readyState and calls all queued functions
     *
     * @method setReady
     * @private
     */
e.prototype.setReady=function(){var a=this;this.__isReady=!0,this.__onReadyCallbacks.forEach(function(b){b.call(a)}),this.__onReadyCallbacks=[]},e.prototype.unsetReady=function(){this.__isReady=!1},a.SocketConnection=e}(XQCore),/**
 * XQCore socket module handles socket connections to a socket server
 * 
 * @module XQCore.Socket
 * @requires XQCore.Logger
 * @requires sockJS-client
 *
 */
function(a,b){"use strict";var c=new a.Logger("Socket");c.logLevel=5;/**
     * Socket connection module
     * @param {String} url     Socket server uri
     * @param {String} channel Socket channel
     *
     * 
     * @example {js}
     * var socket = new XQCore.Socket('http://mysocket.io:9889', 'mychannel');
     * socket.on('data', function() {
     *   console.log('Got data from server');
     * });
     */
var d=function(b,c){this.__isReady=!1,this.__onReadyCallbacks=[],this.channel=c,this.socket=new a.SocketConnection(b),this.socket.registerChannel(c,this)};a.extend(d.prototype,new a.Event),/**
     * Sends a socket message to a connected socket server
     *
     * @method send
     * @param {String} eventName Event name
     * @param {Object} data      Event data, multiple args are allowed
     */
d.prototype.send=function(a,b){var c=Array.prototype.slice.call(arguments);c.unshift(this.channel),this.socket.send.apply(this.socket,c)},a.Socket=d}(XQCore),/**
 * XQCore Syncronniced module module
 *
 * @module XQCore.SyncModel
 * @requires XQCore.Model
 * @requires XQCore.Socket
 */
function(a,b){"use strict";var c;c=function(b,c){/**
         * @property {Boolean} noAutoRegister Disables auto registration. SyncList.register() must be called manually to register the list at the socket server.
         */
this.noAutoRegister=!1,
//Call XQCore.Model constructor
a.Model.call(this,b,c),this.server=this.server||location.protocol+"//"+location.hostname,this.port=this.port||a.socketPort,this.path=this.path||"xqsocket",this.channel=this.channel||this.name.toLowerCase(),this.syncEnabled=!1,this.connectToSocket(),this.noAutoRegister||this.register()},c.prototype=Object.create(a.Model.prototype),c.prototype.constructor=c,c.inherit=function(c,d){"object"==typeof c&&(d=c,c=b);var e=function(){a.SyncModel.call(this,c,d)};return e.prototype=Object.create(a.SyncModel.prototype),e.prototype.constructor=e,e},c.prototype.connectToSocket=function(){var b=this.server+":"+this.port+"/"+this.path;this.socket||(this.dev("Connect to socket:",b),this.socket=new a.Socket(b,this.channel))},c.prototype.register=function(a){var b=this;this.syncEnabled=!!a,b.dev("Register syncmodel at server:",b.name);var c={noSync:!0};b.socket.on("syncmodel.set",function(a){b.set(a,c)}),b.socket.on("syncmodel.replace",function(a){c.replace=!0,b.set(a,c)}),b.socket.on("syncmodel.item",function(a,d){b.set(a,d,c)}),b.socket.on("syncmodel.insert",function(a,d,e){b.insert(a,d,e,c)}),b.socket.on("syncmodel.remove",function(a,d,e){b.remove(a,d,e,c)}),b.socket.on("syncmodel.reset",function(){b.reset(c)}),b.socket.on("syncmodel.init",function(a){console.log("Got initial data request:",a),b.set(a,c)}),b.socket.send("syncmodel.register",{name:b.name})},c.prototype.unregister=function(){var a=this.conf.syncWith||this.name.replace(/Model$/,"");this.socket.send("syncmodel.unregister",{name:a}),this.socket.off("syncmodel.set"),this.socket.off("syncmodel.replace"),this.socket.off("syncmodel.item"),this.socket.off("syncmodel.insert"),this.socket.off("syncmodel.remove"),this.socket.off("syncmodel.reset"),this.socket.off("syncmodel.init")},c.prototype.emitRemote=function(a,b){this.socket.send(a,b)},c.prototype.sync=function(a){if(this.syncEnabled){var b=Array.prototype.slice.call(arguments,1);b.unshift("syncmodel."+a),this.emitRemote.apply(this,b)}},c.prototype.fetchModel=function(){this.emitRemote("syncmodel.fetch")},a.SyncModel=c}(XQCore),/**
 * XQCore List
 *  
 * @module  XQCore.List
 * @requires XQCore.Event
 * @requires XQCore.Logger
 * @example
 * 
 * var Model = XQCore.Model.inherit({
 *     schema: {
 *         title: { type: 'string', min: 3, max 100 },
 *         content: { type: 'string', min: 3, max 1000 }
 *     }
 * });
 * 
 * var list new XQCore.List('myList', function(self) { {
 *     self.model = Model
 * }});
 *
 * list.push({
 *     title: 'Item 1',
 *     content: 'This is my first list item'
 * });
 * 
 */
function(a,b){"use strict";var c;c=function(c,d){
//Call XQCore.ReadyState constructor
a.ReadyState.call(this),
//Call Event constructor
a.Event.call(this);var e=this;"object"==typeof arguments[0]&&(d=c,c=d.name),/**
         * Enable debug mode
         * @public
         * @type {Boolean}
         */
this.debug=a.debug,d===b&&(d={}),this.__unfiltered={},this.name=(c?c.replace(/List$/,""):"Nameless")+"List",/**
         * Contains list items
         * @property {Array} items
         */
this.items=[],/**
         * Sets a maxlength of items
         * @property {Number} maxlength
         * @default null
         */
this.maxLength=null,/**
         * Sets the Model to be used to create new models in push and unshift methods.

         * @property {Object} model
         */
this.model||(this.model=a.Model),"function"==typeof d?d.call(this,e):a.extend(this,d),/**
         * Sets default values
         * @property {Object|Array} defaults
         */
this.defaults&&!a.isEmpty(this.defaults)&&this.push(this.defaults,{silent:!0,noValidation:!0}),this.state("ready")},a.extend(c.prototype,a.ReadyState.prototype),a.extend(c.prototype,a.Event.prototype),a.extend(c.prototype,new a.Logger),a.Sync&&a.extend(c.prototype,a.Sync.prototype),c.inherit=function(c,d){"object"==typeof c&&(d=c,c=b);var e=function(){a.List.call(this,c,d)};return e.prototype=Object.create(a.List.prototype),e.prototype.constructor=e,e},Object.defineProperty(c.prototype,"length",{get:function(){return this.items.length}}),c.prototype.state=function(a){this.__state=a,this.emit("state."+a),this.emit("state.change",a)},c.prototype.getState=function(){return this.__state},c.prototype.push=function(b,c){var d,e,f=[];c=c||{},Array.isArray(b)||(b=[b]);for(var g=0,h=b.length;h>g;g++){if(e=b[g],e instanceof a.Model?d=e:(d=new this.model("ListItem"),d.set(e)),!d.isValid())return!1;f.push(d)}var i=this.items.push.apply(this.items,f);return i&&(this.maxLength&&this.items.length>this.maxLength&&this.items.splice(0,this.items.length-this.maxLength),c.silent||this.emit("item.push",f,i),c.noSync||"function"==typeof this.sync&&this.sync("push",f)),!0},c.prototype.unshift=function(b,c){var d,e,f=[];c=c||{},Array.isArray(b)||(b=[b]);for(var g=0,h=b.length;h>g;g++){if(e=b[g],e instanceof a.Model?d=e:(d=new this.model("ListItem"),d.set(e)),!d.isValid())return!1;f.unshift(d)}var i=this.items.unshift.apply(this.items,f);return i&&(this.maxLength&&this.items.length>this.maxLength&&this.items.splice(this.maxLength),c.silent||this.emit("item.unshift",f,i),c.noSync||"function"==typeof this.sync&&this.sync("unshift",f)),!0},c.prototype.pop=function(a){var c;return a=a||{},c=this.items.pop()||null,c===b?null:(a.silent||this.emit("item.pop",c),a.noSync||"function"==typeof this.sync&&this.sync("pop",c),c)},c.prototype.shift=function(a){var c;return a=a||{},c=this.items.shift()||null,c===b?null:(a.silent||this.emit("item.shift",c),a.noSync||"function"==typeof this.sync&&this.sync("shift",c),c)},c.prototype.update=function(a,b,c){c=c||{};var d;return d="number"==typeof a?this.items[a]:this.findOne(a),d&&(d.set(b,{noSync:!0}),c.silent||this.emit("item.update",d),c.noSync||"function"==typeof this.sync&&this.sync("update",a,b)),d},c.prototype.remove=function(a,b){b=b||{};var c,d=0;if("number"==typeof a)c=this.items[a],d=a;else{c=this.findOne(a);for(var e=0,f=this.items.length;f>e;e++)if(this.items[e]===c){d=e;break}}return c&&(this.items.splice(d,1),b.silent||this.emit("item.remove",c,d),b.noSync||"function"==typeof this.sync&&this.sync("remove",a,d)),c},c.prototype.clear=function(a){if(a=a||{},0===this.items.length)return 0;var b=this.toArray();return this.items=[],a.silent||this.emit("item.clear",b),a.noSync||"function"==typeof this.sync&&this.sync("clear",b),b.length},c.prototype.toArray=function(){return this.items.map(function(a){return a.properties})},c.prototype.toJSON=function(){return this.toArray()},c.prototype.findOne=function(a){var b;if(b=this.items)for(var c=0;c<b.length;c++){var d,e=b[c];for(var f in a)if(a.hasOwnProperty(f)){if(e.properties[f]&&e.properties[f]===a[f]){d=!0;break}d=!1}if(d===!0)return e}return null},c.prototype.find=function(a){var b,c=[];if(b=this.items)for(var d=0;d<b.length;d++){var e,f=b[d];for(var g in a)if(a.hasOwnProperty(g)){if(f.properties[g]&&f.properties[g]===a[g]){e=!0;break}e=!1}e===!0&&c.push(f)}return c},c.prototype.each=function(a,b){"function"==typeof a&&(b=a,a={});for(var c=a,d=0,e=this.items.length;e>d;d++)c=b(this.items[d],c);return c},a.List=c}(XQCore),/**
 * XQCore.SyncList - Syncronized list
 *
 * @module  XQCore.SyncList
 * @requires XQCore.List
 * @requires XQCore.Socket
 *
 * @example
 *
 * var syncList = new XQCore.SyncList('mylist', {
 *     port: 3434,
 *     server: 'http://socket.xqcore.com'
 * });
 *
 * This call connects to a socket server
 * http://socket.xqcore.com/xqsocket/mylist
 *
 * A <code>synclist.register</code> event will be fiered to the socket server
 * These data will be send:
 * <code class="json">
 * {
 *     name: this.name
 * }
 *
 * Registers a few listeners:
 * synclist.push, synclist.shift, synclist.pop, synclist.unshift
 * 
 * </code>
 */
function(a,b){"use strict";var c;c=function(b,c){/**
         * @property {Boolean} noAutoRegister Disables auto registration. SyncList.register() must be called manually to register the list at the socket server.
         */
this.noAutoRegister=!1,
//Call XQCore.List constructor
a.List.call(this,b,c),this.server=this.server||location.protocol+"//"+location.hostname,this.port=this.port||a.socketPort,this.path=this.path||"xqsocket",this.channel=this.channel||this.name.toLowerCase(),this.syncEnabled=!1,this.connectToSocket(),this.noAutoRegister||this.register()},c.prototype=Object.create(a.List.prototype),c.prototype.constructor=c,c.inherit=function(c,d){"object"==typeof c&&(d=c,c=b);var e=function(){a.SyncList.call(this,c,d)};return e.prototype=Object.create(a.SyncList.prototype),e.prototype.constructor=e,e},c.prototype.connectToSocket=function(){var b=this.server+":"+this.port+"/"+this.path;this.socket||(this.dev("Connect to socket:",b),this.socket=new a.Socket(b,this.channel))},c.prototype.register=function(a){var b=this;"boolean"==typeof a&&(this.syncEnabled=a),b.dev("Register synclist at server:",b.name);var c={noSync:!0};b.socket.on("synclist.push",function(a){b.push(a,c)}),b.socket.on("synclist.unshift",function(a){b.push(a,c)}),b.socket.on("synclist.pop",function(){b.push(c)}),b.socket.on("synclist.shift",function(){b.push(c)}),b.socket.on("synclist.update",function(a,d){b.update(a,d,c)}),b.socket.on("synclist.clear",function(){b.clear(c)}),b.socket.on("synclist.init",function(a){console.log("Got initial data request:",a),b.push(a,c)}),b.socket.send("synclist.register",{name:b.name})},c.prototype.unregister=function(){this.dev("Unregister synclist at server:",this.name),this.socket.send("synclist.unregister",{name:this.name}),this.socket.off("synclist.push"),this.socket.off("synclist.unshift"),this.socket.off("synclist.pop"),this.socket.off("synclist.shift"),this.socket.off("synclist.update"),this.socket.off("synclist.clear"),this.socket.off("synclist.init")},c.prototype.emitRemote=function(a,b){this.socket.send(a,b)},c.prototype.sync=function(a){if(this.syncEnabled){var b=Array.prototype.slice.call(arguments,1);b.unshift("syncmodel."+a),this.emitRemote.apply(this,b)}},c.prototype.fetchList=function(){this.emitRemote("synclist.fetch")},a.SyncList=c}(XQCore);