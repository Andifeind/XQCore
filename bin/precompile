#!/usr/bin/env node
/*global XQCore:true */
var fs = require('fs'),
	path = require('path');

var mkdirp = require('mkdirp'),
	program = require('commander');

var XQCore = require('../build/xqcore-cli');

program.version('0.0.1')
	.usage('[options] <file ...>')
	.option('-o, --out <outfile>', 'Write precompiled file to <outfile>. If this option is not present write to STDOUT')
	.option('-d, --debug', 'Enable debug mode')
	.option('-v, --verbose', 'Output more infos')
	.parse(process.argv);

// console.log('Args', program.args);
var src = program.args[0],
	source = fs.readFileSync(src, 'utf8'),
	tplName = path.basename(src, path.extname(src));

//Set debug mode
XQCore.debug = !!program.debug;

if (program.verbose) {
	console.log('Precompile ', program.args);
	console.log('---------- begin of source file ----------');
	console.log(source);
	console.log('---------- end of source file ----------');
	console.log('size: ', source.length, 'chars');
	console.log('');
	console.log('');
}


var tmpl = new XQCore.Tmpl();
var precompiled = tmpl.precompile(source).toString();

if (program.verbose) {
	console.log('---------- begin of precompiled file ----------');
	console.log(precompiled);
	console.log('---------- end of precompiled file ----------');
	console.log('size: ', precompiled.length, 'chars');
}

if (program.out) {
	console.log('Write to', program.out);
	var dir = path.dirname(program.out);
	if (dir) {
		mkdirp.sync(dir);
	}
	fs.writeFileSync(program.out, 'XQCore.templateCache.' + tplName + ' = \'' + precompiled.replace(/'/g, '\\\'') + '\';');
}